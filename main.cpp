/**
 * @file bg_sub.cpp
 * @brief Background subtraction tutorial sample code
 * @author Domenico D. Bloisi
 */

//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;

// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

void processVideo();



int main(int argc, char* argv[])
{
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");

    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

    processVideo();

    destroyAllWindows();
    return EXIT_SUCCESS;
}


void processVideo()
{
    //create the capture object
    VideoCapture capture(0);
    if(!capture.isOpened()){
        cerr << "Unable to open capture" << endl;
        exit(EXIT_FAILURE);
    }

    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 )
    {
        capture >> frame;
		resize(frame, frame, Size(), 0.5, 0.5, CV_INTER_AREA);

        if( !frame.rows )
        {
			keyboard = waitKey( 30 );
			continue;
        }

        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        static int i = 0;
        ss << i++;
        string frameNumberString = ss.str();
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));




		GaussianBlur(fgMaskMOG2, fgMaskMOG2, Size(7,7), 1.5, 1.5);
        Canny(fgMaskMOG2, fgMaskMOG2, 0, 30, 3);

        imshow("Frame", frame );
        imshow("FG Mask MOG 2", fgMaskMOG2);

        vector<vector<Point> > contours;
		vector<Vec4i> hierarchy;
		RNG rng(12345);

		findContours( fgMaskMOG2, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );


		 /// Draw contours
		int countour_idx = 0;
		double max = 0.0;
		for( int i = 0; i< contours.size(); i++ )
		{
			double a = contourArea( contours[i], false);
			if( a > max )
			{
				countour_idx = i;
				max = a;
			}
		}

		Mat drawing = Mat::zeros( fgMaskMOG2.size(), CV_8UC3 );
		if( contours.size() )
		{
			Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
			drawContours( drawing, contours, countour_idx, color, 2, 8, hierarchy, 0, Point() );
		}

		/// Show in a window
		namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
		imshow( "Contours", drawing );

		 /* /// Draw contours
		  Mat drawing = Mat::zeros( fgMaskMOG2.size(), CV_8UC3 );
		  for( int i = 0; i< contours.size(); i++ )
			 {
			   Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
			   drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
			 }

		  /// Show in a window
		  namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
		  imshow( "Contours", drawing );*/


        //get the input from the keyboard
		keyboard = waitKey( 30 );
    }
    capture.release();
}

